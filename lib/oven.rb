module JekyllPizza
  class Oven
    
    def bake(user, dir, opts = {})
      @user = user
      @api = @user.api
      @dir = dir
      @safe_params = opts[:safe_params]
      @root_repo = opts[:root_repo]
      @repo_url = opts[:repo_url]

      @repo = commit_new_jekyll(@dir)
      check_build_status
      { repo: @repo, full_repo_url: full_repo_url }
    end

    def commit_new_jekyll(dir)
      repo = @api.create_repository(@repo_url, auto_init: true) 
      full_repo_path = repo.full_name
      
      sha_latest_commit = create_refs(full_repo_path)

      sha_base_tree = @api.commit(full_repo_path, sha_latest_commit).commit.tree.sha
      
      last_sha = scan_folder(dir, full_repo_path, sha_latest_commit, sha_base_tree)

      @api.update_branch(full_repo_path, @ref.gsub('heads/', ''), last_sha)
      @api.edit_repository(full_repo_path,     description: 'A Jekyll-powered site generated by jekyll:pizza:pizza',
                                               homepage: full_repo_url,
                                               default_branch: ((@root_repo == true) ? 'master' : 'gh-pages'))

      @api.merge(full_repo_path, "#{branch_name}", 'feature')

      repo
    end

    def create_refs(full_repo_path)
      @ref = 'heads/feature'

      sha_latest_commit = @api.ref(full_repo_path, 'heads/master').object.sha
      @api.create_ref(full_repo_path, 'heads/gh-pages', sha_latest_commit) if @root_repo != true
      @api.create_ref(full_repo_path, @ref, sha_latest_commit).object.sha
    end

    def scan_folder(dir, repo_path, sha_latest_commit, sha_base_tree)
      @latest_sha = sha_latest_commit
      Dir.foreach(dir) do |item|
        next if item == '.' || item == '..'
        full_path = File.expand_path(item, dir)
        puts "DIR! #{full_path}" if File.directory?(full_path) 
        scan_folder(full_path, repo_path, @latest_sha, sha_base_tree) if File.directory?(full_path)
        next if File.directory?(full_path)

        sha_latest_commit = @api.ref(repo_path, @ref).object.sha ###### here
        sha_base_tree = @api.commit(repo_path, sha_latest_commit).commit.tree.sha

        sha_new_commit = create_commit(item, dir, repo_path, sha_latest_commit, sha_base_tree)
        @latest_sha = sha_new_commit
      end
      @latest_sha
    end

    def create_commit(file, dir, repo_path, sha_latest_commit, sha_base_tree)
      full_path = File.expand_path(file, dir)
      remote_path = full_path.gsub(@dir + '/', '')
      blob_sha = @api.create_blob(repo_path, Base64.encode64(File.read(full_path)), 'base64')
      sha_new_tree = @api.create_tree(repo_path, 
                                      [{ path: remote_path, 
                                         mode: '100644', 
                                         type: 'blob', 
                                         sha: blob_sha }], 
                                      base_tree: sha_base_tree).sha
      commit_message = "Creates #{remote_path}"
      puts "committing: #{full_path}"
      sha_new_commit = @api.create_commit(repo_path, commit_message, sha_new_tree, sha_latest_commit).sha
      @api.update_ref(repo_path, @ref, sha_new_commit)
      sha_new_commit
    end

    def full_repo_url
      proto = 'https://'
      return proto + @repo_url if @root_repo
      proto + @user.login + '.github.io/' + @repo_url + '/'
    end

    def branch_name
      return 'gh-pages' unless @safe_params['baseurl'].blank?
      'master'
    end

    def update_readme(branch_name, builds)
      readme_info = @api.contents("#{@repo[:full_name]}", path: '/README.md')
      @api.update_contents("#{@repo[:full_name]}",
                           '/README.md',
                           'New build',
                           "#{readme_info[:sha]}",
                           "#Thank you for using Jekyll.Pizza#{'!' * (1 + builds)}",
                           branch: "#{branch_name}")
      puts 'Starting new build'
    end

    def check_build_status(count = 0)
      builds = count
      build_status = @api.pages("#{@repo[:full_name]}")[:status]
      if builds == 5
        puts "exceeded build limit: errored #{builds} times."
        redirect '/new?error=Oops, Something went wrong!'
      end
      
      case build_status 
      when 'building'
        puts "Build status: #{build_status}"
        sleep(5) # Give GHPages a chance to catch up with api requests
        check_build_status(builds)
      when 'errored'
        puts "Build status: #{build_status}"
        update_readme(branch_name, builds)
        builds += 1
        check_build_status(builds)
      else
        puts 'BUILD COMPLETE!'
      end
    end
  end
end
